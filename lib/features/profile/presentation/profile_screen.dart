import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  bool _isLoading = true;
  String? _userPhotoUrl;
  Map<String, String> _latestAnswers = {};
  String? _userName;
  String? _userId;

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        debugPrint('‚ùå „É¶„Éº„Ç∂„Éº„ÅåË™çË®º„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        setState(() => _isLoading = false);
        return;
      }

      _userId = user.uid;
      debugPrint('üîç „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÈñãÂßã: $_userId');

      // 1) profiles/{uid}.photoUrl „ÇíÊúÄÂÑ™ÂÖà„ÅßÂèñÂæó
      final profileDoc = await _firestore.collection('profiles').doc(_userId).get();
      if (profileDoc.exists) {
        final profileData = profileDoc.data();
        final photoUrl = profileData?['photoUrl'] as String?;
        
        // Firebase Storage„ÅÆURL„ÅØÁÑ°Ë¶ñ„Åó„ÄÅ„Ç¢„Çª„ÉÉ„Éà„Éë„Çπ„ÅÆ„Åø„Çí‰ΩøÁî®
        if (photoUrl != null && !photoUrl.startsWith('http')) {
          _userPhotoUrl = photoUrl;
          debugPrint('üì∏ profiles/photoUrl („Ç¢„Çª„ÉÉ„Éà): $_userPhotoUrl');
        } else {
          debugPrint('üì∏ profiles/photoUrl: Firebase Storage URL„ÅØÁÑ°Ë¶ñ');
        }
      } else {
        debugPrint('üì∏ profiles/photoUrl: „Éâ„Ç≠„É•„É°„É≥„Éà„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì');
      }

      // 2) users/{uid} „Åã„Çâ„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂèñÂæó
      final userDoc = await _firestore.collection('users').doc(_userId).get();
      if (userDoc.exists) {
        final userData = userDoc.data();
        _userName = userData?['name'] as String? ?? '„ÅÇ„Å™„Åü';
        debugPrint('üë§ „É¶„Éº„Ç∂„ÉºÂêç: $_userName');
      }

      // 3) questionnaireId„Çí‰ΩøÁî®„Åó„Å¶Ë≥™ÂïèÂõûÁ≠î„ÇíÂèñÂæó
      final profileQuestionnaires = await _firestore
          .collection('profile_questionnaires')
          .where('userId', isEqualTo: _userId)
          .orderBy('createdAt', descending: true)
          .limit(1)
          .get();

      debugPrint('üìã profile_questionnaires Ê§úÁ¥¢ÁµêÊûú: ${profileQuestionnaires.docs.length}‰ª∂');

      if (profileQuestionnaires.docs.isNotEmpty) {
        final latestProfile = profileQuestionnaires.docs.first.data();
        _latestAnswers = {
          'q1': latestProfile['one_word'] ?? '',
          'q2': latestProfile['favorite_food'] ?? '',
          'q3': latestProfile['like_work'] ?? '',
          'q4': latestProfile['like_music_genre'] ?? '',
          'q5': latestProfile['like_taste_sushi'] ?? '',
          'q6': latestProfile['what_do_you_use_the_time'] ?? '',
        };
        debugPrint('‚úÖ questionnaireId„Åã„ÇâÂõûÁ≠î„ÇíÂèñÂæó: $_latestAnswers');
      } else {
        debugPrint('‚ùå questionnaireId„Å´„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      }

    } catch (e) {
      debugPrint('‚ùå „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Widget _buildAvatar() {
    if (_userPhotoUrl != null) {
      return CircleAvatar(
        radius: 48,
        backgroundImage: AssetImage(_userPhotoUrl!),
        onBackgroundImageError: (exception, stackTrace) {
          debugPrint('‚ùå „Ç¢„Éê„Çø„ÉºÁîªÂÉèË™≠„ÅøËæº„Åø„Ç®„É©„Éº: $exception');
        },
      );
    } else {
      return CircleAvatar(
        radius: 48,
        backgroundColor: Colors.blue,
        child: Text(
          (_userName ?? '„ÅÇ„Å™„Åü').substring(0, 1),
          style: const TextStyle(fontSize: 24, color: Colors.white),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    return ListView(
      padding: const EdgeInsets.all(24),
      children: [
        Column(
          children: [
            _buildAvatar(),
            const SizedBox(height: 8),
            Text(
              _userName ?? '„ÅÇ„Å™„Åü',
              style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            Text(
              'ID: $_userId',
              style: const TextStyle(color: Colors.grey),
            ),
            const SizedBox(height: 8),
            Text(
              '"${_latestAnswers['q1'] ?? '„ÅÆ„Çì„Å≥„ÇäÈÅé„Åî„Åó„Å¶„Åæ„Åô„ÄÇ'}"',
              style: const TextStyle(fontSize: 16),
            ),
          ],
        ),
        const SizedBox(height: 16),
        const Text('„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±', style: TextStyle(fontWeight: FontWeight.w600)),
        const SizedBox(height: 8),
        _info('„Å§„ÅÑÈ†º„Çì„Åß„Åó„Åæ„ÅÜ„ÄÅÂ•Ω„Åç„Å™È£ü„ÅπÁâ©„ÅØÔºü', _latestAnswers['q2'] ?? 'Êú™ÂõûÁ≠î'),
        _info('ÊúÄËøë„ÄÅÂ§¢‰∏≠„Å´„Å™„Å£„Å¶„ÅÑ„Çã‰ΩúÂìÅ„ÅØÔºü', _latestAnswers['q3'] ?? 'Êú™ÂõûÁ≠î'),
        _info('„Çà„ÅèËÅ¥„Åè„ÄÅÂ•Ω„Åç„Å™Èü≥Ê•Ω„ÅØÔºü', _latestAnswers['q4'] ?? 'Êú™ÂõûÁ≠î'),
        _info('„ÅäÂØøÂè∏Â±ã„Åï„Çì„Åß„ÄÅ„Åì„Çå„Å†„Åë„ÅØÂ§ñ„Åõ„Å™„ÅÑ„Éç„Çø„ÅØÔºü', _latestAnswers['q5'] ?? 'Êú™ÂõûÁ≠î'),
        _info('„ÇÇ„ÅóÊòéÊó•„Åã„ÇâÂØù„Å™„Åè„Å¶„ÇÇÂπ≥Ê∞ó„Å´„Å™„Å£„Åü„Çâ„ÄÅ„Åù„ÅÆÊôÇÈñì„Çí„Å©„ÅÜ‰Ωø„ÅÜÔºü', _latestAnswers['q6'] ?? 'Êú™ÂõûÁ≠î'),
        const SizedBox(height: 24),
        OutlinedButton(
          onPressed: () {
            Navigator.pushNamed(context, '/settings');
          },
          child: const Text('Ë®≠ÂÆö'),
        ),
        TextButton(
          onPressed: () {
            // ÈÄÄ‰ºöÂá¶ÁêÜ
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: const Text('ÈÄÄ‰ºöÁ¢∫Ë™ç'),
                content: const Text('Êú¨ÂΩì„Å´ÈÄÄ‰ºö„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ'),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text('„Ç≠„É£„É≥„Çª„É´'),
                  ),
                  TextButton(
                    onPressed: () {
                      // ÈÄÄ‰ºöÂá¶ÁêÜ„ÇíÂÆüË£Ö
                      Navigator.pop(context);
                    },
                    child: const Text('ÈÄÄ‰ºö„Åô„Çã', style: TextStyle(color: Colors.red)),
                  ),
                ],
              ),
            );
          },
          child: const Text('ÈÄÄ‰ºö„Åô„Çã', style: TextStyle(color: Colors.red)),
        ),
      ],
    );
  }

  static Widget _info(String label, String value) {
    return Card(
      child: ListTile(
        title: Text(
          label,
          style: const TextStyle(color: Colors.grey, fontSize: 12),
        ),
        subtitle: Text(
          value,
          style: const TextStyle(fontSize: 14),
        ),
      ),
    );
  }
}
